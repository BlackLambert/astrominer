using System.Linq;
using SBaier.DI;
using UnityEngine;

namespace SBaier.Astrominer
{
    public class BuyExploiterAction : AIAction, Injectable
    {
        public bool AllowsFollowAction => true;

        private BuyExploiterActionSettings _settings;
        private ExploitMachineSettings _exploiterSettings;
        private ExploitMachineBuyer _buyer;

        public void Inject(Resolver resolver)
        {
            _settings = resolver.Resolve<BuyExploiterActionSettings>();
            _exploiterSettings = resolver.Resolve<ExploitMachineSettings>();
            _buyer = resolver.Resolve<ExploitMachineBuyer>();
        }
        
        public float GetCurrentWeight(Ship ship)
        {
            if (!ship.HasEmptyInventorySpace)
            {
                return float.MinValue;
            }

            if (!(ship.Location.Value is Base playerBase) || playerBase.Player != ship.Player)
            {
                return float.MinValue;
            }

            if (_exploiterSettings.Levels.All(level => level.Price > ship.Player.Credits.Amount))
            {
                return float.MinValue;
            }

            float weight = _settings.BaseWeight;
            
            // Identified asteroids value
            if (ship.Player.IdentifiedAsteroids.Count > 0)
            {
                Asteroid asteroid = GetAsteroidWithHighestValue(ship);
                float asteroidValue = GetValueOf(asteroid, ship);
                weight += asteroidValue * _settings.AsteroidValueWeightFactor;
            }

            // Amount of money
            weight += ship.Player.Credits.Amount * _settings.MoneyAmountWeightFactor;
            
            // Amount of exploit machines
            weight += ship.Machines.Count * _settings.ExploitMachineAmountWeightFactor;
            
            return weight;
        }

        public void Execute(Ship ship)
        {
            Player player = ship.Player;
            float credits = player.Credits.Amount;
            // TODO implement better exploiter level selection
            ExploitMachineLevelSettings settings = _exploiterSettings.Levels
                .Where(level => level.Price <= credits)
                .Aggregate((level1, level2) => level1.Price < level2.Price ? level2 : level1);
            ship.Machines.Add(_buyer.BuyMachine(player, settings));
        }

        private Asteroid GetAsteroidWithHighestValue(Ship ship)
        {
            return ship.Player.IdentifiedAsteroids.Aggregate((asteroid1, asteroid2) =>
                GetValueOf(asteroid1, ship) > GetValueOf(asteroid2, ship) ? asteroid1 : asteroid2);
        }

        private float GetValueOf(Asteroid asteroid, Ship ship)
        {
            if (asteroid.HasExploitMachine)
            {
                return float.MinValue;
            }
            
            // TODO replace with the amount of necessary jumps
            float distance = ((Vector2)asteroid.transform.position - ship.Position2D).magnitude;
            return asteroid.Value + asteroid.Value * _settings.DistanceValueFactor * distance;
        }
    }
}
