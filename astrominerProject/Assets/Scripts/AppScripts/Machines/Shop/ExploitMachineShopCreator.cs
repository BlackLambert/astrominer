using SBaier.DI;
using UnityEngine;

namespace SBaier.Astrominer
{
	public class ExploitMachineShopCreator : MonoBehaviour, Injectable
	{
		[SerializeField]
		private Transform _hook;

		private Pool<ExploitMachineShop> _pool;
		private Ship _ship;
		private Base _base;

		private ExploitMachineShop _currentShop;

		public void Inject(Resolver resolver)
		{
			_pool = resolver.Resolve<Pool<ExploitMachineShop>>();
			_ship = resolver.Resolve<Ship>();
			_base = resolver.Resolve<Base>();
		}

		private void OnEnable()
		{
			CheckCreateShop();
			_ship.OnFlyTargetChanged += CheckCreateShop;
			_ship.OnFlyTargetReached += CheckCreateShop;
		}

		private void OnDisable()
		{
			TryDestructingShop();
			_ship.OnFlyTargetChanged -= CheckCreateShop;
			_ship.OnFlyTargetReached -= CheckCreateShop;
		}

		private void CheckCreateShop()
		{
			bool shallShow = ShallShow();
			if (shallShow)
				TryCreatingShop();
			else
				TryDestructingShop();
		}

		private void TryCreatingShop()
		{
			if (_currentShop != null)
				return;
			_currentShop = _pool.Request();
			_currentShop.transform.SetParent(_hook, false);
		}

		private void TryDestructingShop()
		{
			if (_currentShop == null)
				return;
			_pool.Return(_currentShop);
			_currentShop = null;
		}

		private bool ShallShow()
		{
			return _ship.FlyTarget.Equals(_base) && 
				!_ship.IsFlying;
		}
	}
}
